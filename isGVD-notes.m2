QUESTIONS/NOTES

- If `R = QQ[x,y,z]`, what type is x? Need this for method declarations. Currently have these all marked with ``??''.

- Need error catching 

- Feature idea: check for GVD up to substitution?

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

loadPackage "PrimaryDecomposition"  -* to check unmixedness *-
loadPackage "Depth"  -* for a CM check in isGVD *-

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

-* SMALL FUNCTIONS (visible to end user) *-

--------------------------------------------------------------------------------

-* create a list of weights for the indeterminates in the ring *-

ringWeights = method()
ringWeights(PolynomialRing, ??) := (R, y) -> (
  -* y will be weighted 10, the rest of the indeterminates will be weighted 0 *-

  indets := gens R;
  weights := append( splice{ (#indets-1):0 } , 10);
  switch(index y, -1, weights)
  )

--------------------------------------------------------------------------------

-* define a new ring with a subset of the indeterminates *-

contractRing = method()
contractRing(PolynomialRing, ??) := (R, y) -> (
  -* create a new ring which has all the indeterminates of R except y *-
  indets := gens R;
  newIndets := delete(y, indets);
  QQ[newIndets]
  )

--------------------------------------------------------------------------------

-* check if C_{y, I} \cap (N_{y,I} + \langle y \rangle) = in_y(I) *-

-* NOTES *-
-* Not sure how to use the `sub` method here; R may not be the current ring, so how do we ensure that it is? *-
-* Possible error: what if I is zero/unit? It shouldn't be. If it's called from the main isGVD code, then we will have already checked this case. But if this function is called directly. Maybe we just have sub(I,R) as well to catch this. *-

isValidGVD = method()
isValidGVD(Ideal, Ideal, ??, Ideal) := (C, N, y, I) -> (
  C := sub(C, R);
  N := sub(N, R);
  intersect(C, N + ideal(y)) == ideal leadTerm(1,I)
  )

--------------------------------------------------------------------------------

-* check if ideal is squarefree ~~with an option to check only~~ with respect to one indeterminate *-
-* there's already `isSquareFree` , but it only works for monomial ideals. I think it would suffice to: set the custom weighting with y weighted 10, everything else 0, then run isSquareFree on the initial ideal. Is that equivalent? *-
-* assuming that this is ok, then here's an implementation *-

isSquareFreeInY = method()
isSquareFreeInY(Ideal, ??) := (I, y) -> (
  -* assuming that our ring is, again, R *-

  weights := ringWeights(R, y);
  R1 := QQ[gens R, MonomialOrder=>{Weights=>weights}, Global=>false];

  I := sub(I, R1);
  isSquareFree monomialIdeal leadTerm I
  )
-* ISSUE: we've now changed the ring we're working in; the next computations will be done in R1, not R *-
-* actually, with local assignment now, is that how that works? This is something to check actually in M2 *-
-* would it also work to make the last line of the method `use R;`, or is that going to mean that method returns the wrong thing? *-

-* would still be good to know whether the whole ideal is squarefree? *-
-* this can be computationally intensive -- leadTerm computes a Gröbner basis when an ideal is passed *-

isIdealSquareFree = method()
isIdealSquareFree(Ideal) := I -> (
  indets := gens R;
  all(apply(indets, y -> isSquareFreeInY(I, y)))
  )

--------------------------------------------------------------------------------

-* check if an ideal is unmixed *-

-* NOTES *-
-* Again, I have the problem with subbing into the current ring *-

isUnmixed = method()
isUnmixed(Ideal) := I -> (
  I := sub(I, R);
  D := primaryDecomposition I;
  d := apply(D, i -> dim(R/i));
  all(apply(d, i -> (i == d_0)), true)  -* list only contains true values *-
  )

--------------------------------------------------------------------------------

-* check if an ideal is generated by indeterminates *-
-* usual issue with (not) knowing R *-

isGeneratedByIndeterminates = method()
isGeneratedByIndeterminates(Ideal) := I -> (
  indets := gens R;
  gensI := first entries gens I;
  isSubset(gensI, indets)
  )


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

-* SMALL FUNCTIONS (invisible to end user) *-

--------------------------------------------------------------------------------

-* print function, prints only if asked *-

printIf = method()
printIf(Boolean, String) := (bool, str) -> (
  if bool then print str
  )

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

-* BIG FUNCTIONS *-

--------------------------------------------------------------------------------

-* do one step of a GVD: take I, find a GB; get C, N; check that they're unmixed and form a GVdecomp *-

-* --> need to decide where unmixedness checks happen *-
-* --> if it's when we compute C, N, then we need to pass that info to the isGVD function to not check it twice *-

oneGVDStep(Ideal) := I -> (

  )

--------------------------------------------------------------------------------

-* big isGVD, does the whole recursion thing *-

isGVD = method()
isGVD(Ideal) := I -> (
  if I == 0 or I == 1 or isGeneratedByIndeterminates I then return true
  if not (isUnmixed I) then return false

  -* original code doesn't run this check every time; set up the option for that *-
  if isHomogeneous I and not isCM(R/I) then return false

  for y in (gens R) do (




    )

  -* if we are here, no indeterminate worked; return false *-
  return false
  )

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

EXAMPLES

--------------------------------------------------------------------------------

Example 1 -- Toric ideal of a graph

(a) isGVD: True
Complete bipartite graph K_{5,3}, GVD by last year's project

loadPackage "Quasidegrees"
R = QQ[e_1..e_15]
A = matrix{
  {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0},
  {0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
  {0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0},
  {0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0},
  {0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1},
  {1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1}
}
I = toricIdeal(A, R)

---

R = QQ[e_1..e_15]
I = ideal(e_10*e_14-e_9*e_15,e_5*e_14-e_4*e_15,e_10*e_13-e_8*e_15,e_9*e_13-e_8
      *e_14,e_5*e_13-e_3*e_15,e_4*e_13-e_3*e_14,e_10*e_12-e_7*e_15,e_9*e_12-e_7*
      e_14,e_8*e_12-e_7*e_13,e_5*e_12-e_2*e_15,e_4*e_12-e_2*e_14,e_3*e_12-e_2*e_
      13,e_10*e_11-e_6*e_15,e_9*e_11-e_6*e_14,e_8*e_11-e_6*e_13,e_7*e_11-e_6*e_
      12,e_5*e_11-e_1*e_15,e_4*e_11-e_1*e_14,e_3*e_11-e_1*e_13,e_2*e_11-e_1*e_12
      ,e_5*e_9-e_4*e_10,e_5*e_8-e_3*e_10,e_4*e_8-e_3*e_9,e_5*e_7-e_2*e_10,e_4*e_
      7-e_2*e_9,e_3*e_7-e_2*e_8,e_5*e_6-e_1*e_10,e_4*e_6-e_1*e_9,e_3*e_6-e_1*e_8
      ,e_2*e_6-e_1*e_7)

----------------------------------------

(b) isGVD: False

Two triangles connected by a bridge of length two

o             o
|\           /|
| o –– o –– o |
|/           \|
o             o

loadPackage "Quasidegrees"
R = QQ[e_1..e_8]
A = matrix{
  {1, 0, 1, 0, 0, 0, 0, 0},
  {0, 1, 0, 0, 0, 1, 0, 0},
  {0, 0, 0, 1, 0, 0, 1, 0},
  {1, 0, 0, 0, 1, 0, 0, 0},
  {0, 1, 0, 0, 0, 0, 0, 1},
  {0, 0, 1, 1, 1, 0, 0, 0},
  {0, 0, 0, 0, 0, 1, 1, 1}
}
I = toricIdeal(A, R)

---

R = QQ[e_1..e_8]
I = ideal(e_2*e_3*e_5*e_7^2-e_1*e_4^2*e_6*e_8)

--------------------------------------------------------------------------------

Example 2 -- Hessenberg patch ideal

(a) isGVD: True
A w_0 example, GVD by Da Silva, Harada

w = (6,5,4,3,2,1)
h = (2,3,4,5,6,6)

R = QQ[x_11..x_15, x_21..x_24, x_31..x_33, x_41, x_42, x_51]
A = matrix{
  {x_11, x_12, x_13, x_14, x_15, 1},
  {x_21, x_22, x_23, x_24, 1, 0},
  {x_31, x_32, x_33, 1, 0, 0},
  {x_41, x_42, 1, 0, 0, 0},
  {x_51, 1, 0, 0, 0, 0},
  {1, 0, 0, 0, 0, 0}
}
N = matrix{
  {0, 1, 0, 0, 0, 0},
  {0, 0, 1, 0, 0, 0},
  {0, 0, 0, 1, 0, 0},
  {0, 0, 0, 0, 1, 0},
  {0 ,0, 0, 0, 0, 1},
  {0, 0, 0, 0, 0, 0}
}
X = inverse(A) * N * A
I = ideal( X_(2,0), X_(3,0), X_(3,1), X_(4,0), X_(4,1), X_(4,2), X_(5,0), X_(5,1), X_(5,2), X_(5,3) )

---

R = QQ[x_11..x_15, x_21..x_24, x_31..x_33, x_41, x_42, x_51]
I = ideal(-x_42+x_51,x_33*x_42-x_33*x_51-x_32+x_41,-x_33+x_42,-x_24*x_33*x_42+
      x_24*x_33*x_51+x_24*x_32-x_24*x_41+x_23*x_42-x_23*x_51-x_22+x_31,x_24*x_33
      -x_24*x_42-x_23+x_32,-x_24+x_33,x_15*x_24*x_33*x_42-x_15*x_24*x_33*x_51-x_
      15*x_24*x_32+x_15*x_24*x_41-x_15*x_23*x_42-x_14*x_33*x_42+x_15*x_23*x_51+x
      _14*x_33*x_51+x_15*x_22-x_15*x_31+x_14*x_32-x_14*x_41+x_13*x_42-x_13*x_51-
      x_12+x_21,-x_15*x_24*x_33+x_15*x_24*x_42+x_15*x_23-x_15*x_32+x_14*x_33-x_
      14*x_42-x_13+x_22,x_15*x_24-x_15*x_33-x_14+x_23,-x_15+x_24)

----------------------------------------

(b) isGVD: False

w = (2, 1, 4, 3)
h = (2, 3, 4, 4)

R = QQ[x_11, x_31..x_33, x_41, x_42]
A = matrix{
  {x_11, 1, 0, 0},
  {1, 0, 0, 0},
  {x_31, x_32, x_33, 1},
  {x_41, x_42, 1, 0}
}
N = matrix{
  {0, 1, 0, 0},
  {0, 0, 1, 0},
  {0, 0, 0, 1},
  {0, 0, 0, 0}
}
X = inverse(A) * N * A
I = ideal(X_(2,0), X_(3,0), X_(3,1))

---

R = QQ[x_11, x_31..x_33, x_41, x_42]
I = ideal(x_11*x_31*x_42-x_31*x_41-x_42,-x_11*x_31*x_33*x_42+x_11*x_31*x_32+x_
      31*x_33*x_41-x_31^2+x_33*x_42-x_32+x_41,-x_11*x_32*x_33*x_42+x_11*x_32^2+x_
      32*x_33*x_41-x_31*x_32+x_42)

--------------------------------------------------------------------------------

Example 3 -- Example 2.16 from Klein, Rajchgot
GVD but not for any lex order

R = QQ[x,y,z,w,r,s]
I = ideal(y*(z*s - x^2), y*w*r, w*r*(z^2 + z*x + w*r + s^2))

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
